AWSTemplateFormatVersion: '2010-09-09' 
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  Name: 
    Description: Name of stack
    Type: String
    Default: k8-stack
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: devops
  
  InstanceTypeKubernetes:
    Description: Kubernetes EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  KubernetesServer:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
       - Key: Name
         Value: 'KubernetesServer'
      InstanceType: !Ref 'InstanceTypeKubernetes'
      SecurityGroups: [!Ref 'InstanceSecurityKubernetesServer']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-0083662ba17882949'
      UserData:
        'Fn::Base64': !Join
          - ''
          - - !Sub |
              #!/bin/sh
              sudo yum -y update
              sudo yum -y install epel-release
              sudo yum -y install libvirt qemu-kvm virt-install virt-top libguestfs-tools bridge-utils
              sudo yum install -y conntrack
              yum install socat -y
              sudo systemctl start libvirtd
              sudo systemctl enable libvirtd
              sudo usermod -a -G libvirt centos
              sudo newgrp libvirt
              sudo sed -i -e 's,#unix_sock_group = "libvirt",unix_sock_group = "libvirt",g' /etc/libvirt/libvirtd.conf
              sudo sed -i -e 's,#unix_sock_rw_perms = "0770",unix_sock_rw_perms = "0770",g' /etc/libvirt/libvirtd.conf
              sudo systemctl restart libvirtd.service
              sudo curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker centos
              systemctl start docker
              sudo yum -y install wget
              sudo wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              sudo chmod +x minikube-linux-amd64
              sudo mv minikube-linux-amd64 /usr/bin/minikube
              sudo curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
              sudo chmod +x kubectl
              sudo mv kubectl  /usr/bin/
              sudo systemctl enable docker.service
              sudo systemctl enable kubelet.service
              minikube start --vm-driver=none
              sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc6/aio/deploy/recommended.yaml
              sudo kubectl create serviceaccount dashboard-admin-sa
              sudo kubectl create clusterrolebinding dashboard-admin-sa --clusterrole=cluster-admin --serviceaccount=default:dashboard-admin-sa
              sudo kubectl proxy 
            
              
  InstanceSecurityKubernetesServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
       - Key: Name
         Value: 'Rules Kubernetes'
      GroupDescription: Enable SSH access via port 22, 80 and 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: !Ref 'SSHLocation'
                
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'KubernetesServer'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [KubernetesServer, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [KubernetesServer, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [KubernetesServer, PublicIp]