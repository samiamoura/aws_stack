AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: devops
  
  InstanceTypeJenkins:
    Description: Jenkins EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  InstanceTypeRemoteServerJenkins:
    Description: Remote server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  JenkinsServer:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
       - Key: Name
         Value: 'JenkinsServer'
      InstanceType: !Ref 'InstanceTypeJenkins'
      SecurityGroups: [!Ref 'InstanceSecurityGroupJenkinsServer']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-0083662ba17882949'
      UserData:
        'Fn::Base64': !Join
          - ''
          - - !Sub |
              #!/bin/sh
              yum -y update
              yum -y install epel-release
            
              # install ansible
              yum -y install ansible

              # retrieve ansible code
              yum -y install git
              git clone https://github.com/diranetafen/cursus-devops.git
              cd cursus-devops/ansible
              ansible-galaxy install -r roles/requirements.yml
              ansible-playbook install_docker.yml
              sudo usermod -aG docker centos
              cd ../jenkins
              docker-compose up -d
              
              # Desactivate ssh timer
              sudo echo 'ClientAliveInterval 4' >> /etc/ssh/sshd_config
              sudo echo 'ClientAliveCountMax 22' >> /etc/ssh/sshd_config
              sudo systemctl restart sshd
              
  InstanceSecurityGroupJenkinsServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
       - Key: Name
         Value: 'Rules JenkinsServer'
      GroupDescription: Enable SSH access via port 22, 80 and 443
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref 'SSHLocation'

  ServerCentosBuildJenkins:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
       - Key: Name
         Value: 'ServerCentosBuildJenkins'
      InstanceType: !Ref 'InstanceTypeRemoteServerJenkins'
      SecurityGroups: [!Ref 'InstanceSecurityGroupServerBuildJenkins']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-0083662ba17882949'
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash
          
            # Desactivate ssh timer
            sudo echo 'ClientAliveInterval 4' >> /etc/ssh/sshd_config
            sudo echo 'ClientAliveCountMax 22' >> /etc/ssh/sshd_config
            sudo systemctl restart sshd
          
            # Activate line numer editor vim
            sudo echo 'set nocompatible' > ~/.vimrc
            sudo echo 'set number' >> ~/.vimrc
  
  InstanceSecurityGroupServerBuildJenkins:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
       - Key: Name
         Value: 'Security Rules for Build servers'
      GroupDescription: Enable SSH access via port 22 and 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref 'SSHLocation'
  
  ServerCentosPreprodJenkins:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
       - Key: Name
         Value: 'ServerCentosPreprodJenkins'
      InstanceType: !Ref 'InstanceTypeRemoteServerJenkins'
      SecurityGroups: [!Ref 'InstanceSecurityGroupServerDeploymentJenkins']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-0083662ba17882949'
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash
          
            # Desactivate ssh timer
            sudo echo 'ClientAliveInterval 4' >> /etc/ssh/sshd_config
            sudo echo 'ClientAliveCountMax 22' >> /etc/ssh/sshd_config
            sudo systemctl restart sshd
          
            # Activate line numer editor vim
            sudo echo 'set nocompatible' > ~/.vimrc
            sudo echo 'set number' >> ~/.vimrc
  
  ServerCentosProductionJenkins:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
       - Key: Name
         Value: 'ServerCentosProductionJenkins'
      InstanceType: !Ref 'InstanceTypeRemoteServerJenkins'
      SecurityGroups: [!Ref 'InstanceSecurityGroupServerDeploymentJenkins']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-0083662ba17882949'
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash
            
            # Desactivate ssh timer
            sudo echo 'ClientAliveInterval 4' >> /etc/ssh/sshd_config
            sudo echo 'ClientAliveCountMax 22' >> /etc/ssh/sshd_config
            sudo systemctl restart sshd
          
            # Activate line number editor vim
            sudo echo 'set nocompatible' > ~/.vimrc
            sudo echo 'set number' >> ~/.vimrc    
  
  InstanceSecurityGroupServerDeploymentJenkins:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
       - Key: Name
         Value: 'Security Rules for PreProd and Production servers'
      GroupDescription: Enable SSH access via port 22,80 and 8181
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 8181
        ToPort: 8181
        CidrIp: !Ref 'SSHLocation'

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'JenkinsServer'
    Value: !Ref 'ServerCentosBuildJenkins'
    Value: !Ref 'ServerCentosPreprodJenkins'
    Value: !Ref 'ServerCentosProductionJenkins'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [JenkinsServer, AvailabilityZone]
    Value: !GetAtt [ServerCentosBuildJenkins, AvailabilityZone]
    Value: !GetAtt [ServerCentosPreprodJenkins, AvailabilityZone]
    Value: !GetAtt [ServerCentosProductionJenkins, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [JenkinsServer, PublicDnsName]
    Value: !GetAtt [ServerCentosBuildJenkins, PublicDnsName]
    Value: !GetAtt [ServerCentosPreprodJenkins, PublicDnsName]
    Value: !GetAtt [ServerCentosProductionJenkins, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [JenkinsServer, PublicIp]
    Value: !GetAtt [ServerCentosBuildJenkins, PublicIp]
    Value: !GetAtt [ServerCentosPreprodJenkins, PublicIp]
    Value: !GetAtt [ServerCentosProductionJenkins, PublicIp]
